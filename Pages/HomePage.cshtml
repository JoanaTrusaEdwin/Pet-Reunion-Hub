@page
@model Pet_Reunion_Hub.Pages.HomePageModel
@{
}

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Mvc;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    

    <style>
        body {
            
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-image: url('/images/PETHOMEPAGE.jpg');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            margin-right: 0;
            margin-left: 0;
            padding-right: 0;
            background-attachment: fixed;
            position: relative;
        }

        .main-container {
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            align-items: center;
            
        }

       

        .row {
            display: flex;
            justify-content: space-around;
            width: 100%;
        }

        .box {
            flex: 1; /* Equal width for each box */
            max-width:300px;
            border:1px solid #ccc;
            padding: 20px;
            margin: 10px;
            text-align: center;
            transition: transform 0.2s ease-in-out;
            cursor: pointer;
            border-radius: 10px;
            text-decoration: none;
            color: inherit; /* Inherit text color from parent */
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

            .box:nth-child(1) {
                background-color: #000; /* Black */
            }

            .box:nth-child(2) {
                background-color: #8B572A; /* Brown */
            }

            .box:nth-child(3) {
                background-color: #F5F5DC; /* Cream */
            }

            .box:nth-child(4) {
                background-color: #fff; /* White */
            }

            .box:hover {
                transform: scale(1.05);
            }

            .box h2 {
                color: white;
            }

            .box p {
                color: #ccc;
            }

        .report-container {
           
            overflow-x: auto; /* Enable horizontal scrolling */
            white-space: nowrap; /* Prevent report cards from wrapping */
            max-width: 100%;
            background-color: white;
            padding:10px;
            border-radius:10px;
        }
      .report-card{
            display: inline-block; /* Display report cards inline */
            background-color: black;
            border-radius: 10px;
            padding: 20px;
            margin-right: 20px; /* Add margin between report cards */
            vertical-align: top;
            width: 300px; /* Set a fixed width for the report cards */
            word-wrap: break-word;
            color:white;
        }

        .photos {
            max-height: 300px; /* Set a maximum height for the photo container */
            overflow-y: auto; /* Enable vertical scrolling if photos exceed container height */
        }

        .photo-container {
            display: flex;
            flex-wrap: wrap; /* Allow photos to wrap to the next line */
            justify-content: center; /* Center the photos horizontally */
            gap: 10px; /* Add spacing between photos */
        }

        .report-photo {
            max-width: 100%; /* Ensure photos don't exceed container width */
            max-height: 100%; /* Ensure photos don't exceed container height */
        }

        .scroll-button {
            margin-top: 10px;
            text-align: center;
            position: fixed; /* Set position absolute */
            top: 55%; /* Adjust top position */
            right: 5%; /* Adjust right position */
            z-index: 1;
        }

        .prev-button {
            margin-top: 10px;
            text-align: center;
            position: fixed; /* Set position absolute */
            top: 60%; /* Adjust top position */
            right: 5%; /* Adjust right position */
            z-index: 1;
        }

        .highlight {
            background-color: yellow;
            color:black;
        }
    </style>
</head>
<body>
 
    <div class="main-container">
        <div class="row">
            <a href="/LOSTPETREPORTING/LPRHome" class="box">
                <h2>Lost Pet Reporting</h2>
                <p>Report missing pets and aid in a quicker reunion.</p>
            </a>

            <a href="/PETMEMORIAL/PMHome" class="box">
                <h2>Pet Memorial</h2>
                <p>Celebrate the joy your pet brought into your life.</p>             
            </a>

            <a href="/COPINGRESOURCES/CRHome" class="box">
                <h2 style="color: black;">The Support Hub</h2>
                <p style="color: black;">Discover tools and materials to help navigate the emotional journey of losing a pet.</p>
            </a>
        </div>
    </div>
    <div class="report-container">
        <h3 style="color:red;">Lost Pets Reported In Your City!</h3>
        <p style="color:black;">These are pets reported to be missing, last seen in your city. Change your residential area (you may find in the navigation bar on the top left corner) to filter reports near you. </p>
        <input style="border-radius:20px; height:40px; width: 500px;" type="text" id="searchInput" onkeyup="searchFunction()" placeholder="Search">
        <br />
        <br />
        @foreach (var report in Model.CreateReport.Reverse())
        {
            <div class="report-card">
                <h2 style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable">@report.PetName</h2>
                <div class="photos">
                    <div class="photo-container">
                        @foreach (var photo in report.ReportPhotos)
                        {
                            <img src="@photo.PhotoUrl" style="max-width: 100%; max-height: 300px;" />
                        }
                    </div>
                </div>

                <div class="details">
                   @*  <h2 style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable">@report.PetName</h2>
                    <br /> *@

                    <h5>Owner Contact Information:</h5>
                    <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable">@report.ContactInformation</p>
                    <br />

                    <p><strong>Last Seen Location:</strong></p>
                    <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.LastSeenLocation</p>
                    <br />

                    <p><strong>Last Seen Time:</strong></p>
                    <p class="searchable"> @report.LastSeenTime.Value.ToString("dd-MMM-yyyy HH:mm")</p>
                    <br />

                    <p><strong>Sex:</strong></p>
                    <p class="searchable">@report.PetGender</p>
                    <br />

                    <p><strong>Additional Description:</strong></p>
                    <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.AdditionalDescription</p>
                    <br />

                    <p><strong>Created on:</strong></p>
                    <p class="searchable">@report.CreatedAt.ToString("dd-MMM-yyyy HH:mm:ss")</p>
                    <br />

                    <br/>
                    <h4>Additional Details</h4>
                  <br/>


                    <p><strong>Estimated Age:</strong></p>
                    <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.Age</p>
                    <br />

                    <p><strong>Pet Microchip ID:</strong></p>
                    <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @(string.IsNullOrEmpty(report.PetMicrochipID) ? "-" : report.PetMicrochipID)</p>
                    <br />

                    <p><strong>Type:</strong></p>
                    <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.PetType</p>
                    <br />

                    <p><strong>Breed:</strong></p>
                    <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.PetBreed</p>
                    <br />

                    <p><strong>Date of Birth:</strong></p>
                    <p class="searchable"> @(report.DateOfBirth != null ? report.DateOfBirth.Value.ToString("dd-MMM-yyyy HH:mm") : "-")</p>
                    <br />
                </div>

            </div>
        }
    </div>
    <div class="prev-button">
        <button onclick="scrollToPrevious()">Previous</button>
    </div>
    <div class="scroll-button">
        <button onclick="scrollToNext()">Next</button>
    </div>

    <script>
        function scrollToNext() {
            const reportContainer = document.querySelector('.report-container');
            reportContainer.scrollBy(800, 0); // Adjust scroll distance as needed
        }

        function scrollToPrevious() {
            const reportContainer = document.querySelector('.report-container');
            reportContainer.scrollBy(-800, 0); // Adjust scroll distance as needed
        }

        function searchFunction() {
            var input = document.getElementById("searchInput");
            var filter = input.value.trim().toLowerCase(); // Convert filter to lowercase for case-insensitive search
            var reports = document.getElementsByClassName("report-card");

            for (var i = 0; i < reports.length; i++) {
                var report = reports[i];
                var searchableElements = report.getElementsByClassName("searchable");
                var found = false;

                for (var j = 0; j < searchableElements.length; j++) {
                    var nameElement = searchableElements[j];
                    var originalText = nameElement.textContent; // Store the original text
                    var text = originalText.toLowerCase(); // Convert text to lowercase for case-insensitive search

                    if (text.indexOf(filter) > -1) {
                        found = true;
                        // Highlight the matching text
                        var newText = highlightMatch(originalText, filter); // Pass the original text for highlighting
                        nameElement.innerHTML = newText;
                    }
                }

                if (found) {
                    report.style.display = "";
                } else {
                    report.style.display = "none";
                }
            }
        }

        // Helper function to highlight the matched text
        function highlightMatch(text, filter) {
            var regex = new RegExp('(' + filter.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + ')', 'ig');
            return text.replace(regex, '<span class="highlight">$1</span>');
        }
    </script>
</body>
</html>
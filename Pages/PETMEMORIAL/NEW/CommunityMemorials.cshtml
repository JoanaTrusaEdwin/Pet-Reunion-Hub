@page
@model Pet_Reunion_Hub.Pages.PETMEMORIAL.NEW.CommunityMemorialsModel
@{
    ViewData["Title"] = "Community Memorials";
}
@using System.Security.Claims
@using PRHDATALIB.Models 

<style>
    .highlight {
        background-color: yellow;
        color: black;
    }

    #home {
        background-color: black;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        font-weight: bold; /* Make the text bold */
        font-size: 1.1em;
    }
</style>
<h1>Discover Memorials Among The Community</h1>
<a href="/PETMEMORIAL/PMHome" class="box" id="home">
    Back to Pet Memorial
    <br />
</a>
<br />
<input style="border-radius:20px; height:40px; width: 500px;" type="text" id="searchInput" onkeyup="searchFunction()" placeholder="Search">
<br/>
<br/>
@{
    // Merge public tributes and public posts
    var mergedData = Model.PublicTributes.Cast<object>().Concat(Model.PublicPosts.Cast<object>()).OrderByDescending(item =>
    {
        if (item is Tribute tribute)
        {
            return tribute.CreatedAt; // Use the CreatedAt property for tributes
        }
        else if (item is Post post)
        {
            return post.CreatedAt; // Use the CreatedAt property for posts
        }
        else
        {
            return DateTime.MinValue; // Return a default value for other types
        }
    });
}

@foreach (var item in mergedData)
{
    if (item is Tribute tribute)
    {
        <div class="tribute" style="background-color: #8b572a; color: white; border-radius: 20px; padding: 20px; margin-bottom: 20px; text-align:center;">

           
            <p style="text-align:justify;"class="searchable">Pet Profile ID: @tribute.Id</p>
            <h2 class="searchable">@tribute.PetName</h2>
            <p><strong>By:</strong></p>
            <p class="searchable">@tribute.User.UserName  </p>
            @if (!string.IsNullOrEmpty(tribute.TributePhoto))
            {
                <img src="@tribute.TributePhoto" alt="Tribute Photo" style="max-width: 500px;" />
            }

            <p><strong>Type:</strong> <span class="searchable">@tribute?.PetType</span></p>

            <p style="white-space: pre-wrap; overflow-wrap: break-word;"><strong>Breed:</strong> <span class="searchable">@(string.IsNullOrEmpty(tribute?.PetBreed) ? "-" : tribute.PetBreed)</span></p>

            <p><strong>Sex:</strong> <span class="searchable">@(string.IsNullOrEmpty(tribute?.PetSex) ? "-" : tribute.PetSex)</span></p>

            <p><strong>Date of Birth:</strong> <span class="searchable">@(tribute?.DateOfBirth != null ? tribute.DateOfBirth.Value.ToString("dd-MMM-yyyy HH:mm") : "-")</span></p>

            <p><strong>Date of Adoption:</strong> <span class="searchable">@(tribute?.DateOfAdoption != null ? tribute.DateOfAdoption.Value.ToString("dd-MMM-yyyy HH:mm") : "-")</span></p>

            <p><strong>Date of Departure:</strong> <span class="searchable">@(tribute?.DateOfDeparture != null ? tribute.DateOfDeparture.Value.ToString("dd-MMM-yyyy HH:mm") : "-")</span></p>

            <p style="white-space: pre-wrap; overflow-wrap: break-word;"><strong>Cause of Death:</strong> <span class="searchable">@(string.IsNullOrEmpty(tribute?.Cause) ? "-" : tribute.Cause)</span></p>

            <p><strong>Owner's Tribute Text:</strong></p>
            <p style="font-style:italic; white-space: pre-wrap; overflow-wrap: break-word;" class="searchable">@(string.IsNullOrEmpty(tribute?.TributeText) ? "-" : tribute.TributeText)</p>
            <p><strong>Created on:</strong>

            <p class="searchable">@tribute.CreatedAt.ToString("dd-MMM-yyyy HH:mm:ss") (UTC)</p>

            <div style="color:black; border-radius: 20px; padding: 20px; margin-bottom: 20px; text-align:justify;">
                <!-- Comments Section -->
                <h3 style="color:white;">Comments</h3>
                @if (tribute.Comments.Any())
                {

                    @foreach (var comment in tribute.Comments)
                    {
                        <div class="comment-container" style="background-color: #593214; color:white;border-radius: 5px; padding: 10px; margin-bottom: 10px; overflow-wrap: break-word;">
                            <p class="searchable">Pet Profile Comment ID: @comment.Id</p>
                            <br />
                            <strong class="searchable">@@@comment.User.UserName</strong> <!-- Display username -->
                            <br />
                           
                            <p class="searchable">@comment.Content</p>
                            <br />

                            <p class="searchable">@comment.CreatedAt.ToString("dd-MMM-yyyy HH:mm:ss") (UTC) </p>
                            <br/>
                            @if (User.Identity.IsAuthenticated && comment.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                            {

                                <button type="button" class="btn btn-danger remove-btn" data-comment-id="@comment.Id">Delete</button>
                            }
                        </div>
                    }

                }
                else
                {
                    <p style="color:white;">No comments yet.</p>
                }

                <!-- Form to Add New Comment -->
                <form method="post">
                    <input type="hidden" name="tributeId" value="@tribute.Id" />
                    <div class="form-group">
                        <label for="commentContent" style="color:white;"><b>Add a comment:</b></label>
                        <p style="color:white;">To mention a user, simply type "@@[username of that commenter]" anywhere in the comment. Or, you can just copy the username of the comment you want to reply to. For example, if you want to mention the user example@gmail.com, you would type "@@example@gmail.com"..</p>
                        <textarea maxlength="1000" class="form-control autosize  character-count" id="commentContent" name="commentContent" rows="3" oninput="handleInput(event, 'comment-content-count')"></textarea>
                        @* <span style="color:white;" id="comment-content-count" class="character-count-display">0/1000</span> *@
                    </div>
                    <button type="submit" class="btn btn-primary" style="background-color:black; border-radius:5px; color:white; border:none;"><b>Post comment</b></button>
                </form>


                <hr />
            </div>
            <hr />
            <form asp-antiforgery="true">
                <input type="hidden" name="__RequestVerificationToken" value="@ViewData["RequestVerificationToken"]" />
                <!-- Your other form elements -->
            </form>
        </div>
    }
    else if (item is Post post)
    {
        <div class="tribute" style="background-color:white; border-radius: 20px; padding: 20px; margin-bottom: 20px;">
           
            <p class="searchable">Post ID: @post.Id</p>
            
            <br/>
            <h3 style="overflow-wrap:break-word;"class="searchable">@(string.IsNullOrEmpty(post.Title) ? "-" : post.Title)</h3>
         
            <h6 style="white-space: pre-wrap; overflow-wrap: break-word;">By: @post.User.UserName</h6>
          @*   <p><strong>Title:</strong>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable">@(string.IsNullOrEmpty(post.Title) ? "-" : post.Title)</p>
            <br /> *@

            <p><strong>Caption:</strong>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable">@(string.IsNullOrEmpty(post.Content) ? "-" : post.Content)</p>
            <br />

                    @if (post.Media != null && post.Media.Any())
                    {
                <p><strong>Media:</strong></p>
                <div class="media-container">
                            @foreach (var mediaItem in post.Media)
                            {
                                var lastSlashIndex = mediaItem.MediaUrl.LastIndexOf('/');
                                var fileName = mediaItem.MediaUrl.Substring(lastSlashIndex + 1);
                                var lastUnderscoreIndex = fileName.LastIndexOf('_');

                                if (lastUnderscoreIndex != -1)
                                {
                                    var fileNameWithoutUniqueIdentifier = fileName.Substring(0, lastUnderscoreIndex);
                            <span style="display: block; font-size: small;">@fileNameWithoutUniqueIdentifier</span>
                                }
                                else
                                {
                            <span style="display: block; font-size: small;">@fileName</span>
                                }

                                @if (mediaItem.MediaType == "Image")
                                {
                            <img src="@mediaItem.MediaUrl" alt="Media Image" style="max-width: 200px; margin-right: 10px;">
                                }
                                else if (mediaItem.MediaType == "Video")
                                {
                            <video src="@mediaItem.MediaUrl" controls style="max-width: 200px; margin-right: 10px;"></video>
                                }
                                else if (mediaItem.MediaType == "Audio")
                                {
                            <audio src="@mediaItem.MediaUrl" controls style="max-width: 200px; margin-right: 10px;"></audio>
                                }
                            }
                </div>
                    }



            <p><strong>Created on:</strong> @post.CreatedAt.ToString("dd-MMM-yyyy HH:mm:ss") (UTC)</p>

            <div style="color:black; border-radius: 20px; padding: 20px; margin-bottom: 20px; text-align:justify;">
                <!-- Comments Section -->
                <h3 style="color:black;">Comments</h3>
                        @if (post.PostComments.Any())
                        {

                            @foreach (var comment in post.PostComments)
                            {
                        <div class="comment-container" style="background-color: lightgray; color:black;border-radius: 5px; padding: 10px; margin-bottom: 10px; overflow-wrap: break-word;">
                            <p class="searchable">Post Comment ID: @comment.Id</p>
                            <br />
                            <strong class="searchable">@@@comment.User.UserName</strong> <!-- Display username -->
                            <br />
                           
                            <p class="searchable">@comment.Content</p>
                            <br />

                            <p class="searchable">@comment.CreatedAt.ToString("dd-MMM-yyyy HH:mm:ss") (UTC) </p>
                            <br/>
                                    @if (User.Identity.IsAuthenticated && comment.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                                    {

                                <button type="button" class="btn btn-danger postremove-btn" data-postcomment-id="@comment.Id">Delete</button>
                                    }
                        </div>
                            }

                        }
                        else
                        {
                    <p style="color:black;">No comments yet.</p>
                        }

                <!-- Form to Add New Comment -->
                <form method="post" asp-page-handler="PostComment">
                    <input type="hidden" name="postId" value="@post.Id" />
                    <div class="form-group">
                        <label for="postCommentContent" style="color:black;"><b>Add a comment:</b></label>
                        <p style="color:black;">To mention a user, simply type "@@[username of that commenter]" anywhere in the comment. Or, you can just copy the username of the comment you want to reply to. For example, if you want to mention the user example@gmail.com, you would type "@@example@gmail.com".</p>
                        <textarea maxlength="1000" class="form-control  autosize  character-count" id="postCommentContent" name="postCommentContent" rows="3" oninput="handleInput(event, 'postcomment-content-count')"></textarea>
                        @* <span id="postcomment-content-count" class="character-count-display">0/1000</span> *@
                    </div>
                    <button type="submit" class="btn btn-primary" style="background-color:black; border-radius:5px; color:white; border:none;"><b>Post Comment</b></button>
                </form>


                <hr />
            </div>
            <hr />
            <form asp-antiforgery="true">
                <input type="hidden" name="__RequestVerificationToken" value="@ViewData["RequestVerificationToken"]" />
                <!-- Your other form elements -->
            </form>
        </div>

       
    }
}

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        // Your existing JavaScript code here
        function updateCharacterCount(inputId, countId, limit) {
            var input = document.getElementById(inputId);
            var count = document.getElementById(countId);
            console.log("Input value:", input.value);
            console.log("Input length:", input.value.length);
            count.textContent = input.value.length + "/" + limit;
        }

        // Call this function when the input changes
        function handleInput(event, countId) {
            var inputId = event.target.id;
            var limit = event.target.getAttribute('maxlength') || 0;
            updateCharacterCount(inputId, countId, limit);
        }

        var characterCountInputs = document.querySelectorAll('.character-count');
        characterCountInputs.forEach(function (input) {
            input.addEventListener('input', function (event) {
                var countId = input.getAttribute('data-count-id');
                handleInput(event, countId);
            });
        });
        var token = $('input[name="__RequestVerificationToken"]').val();

        $(document).ready(function () {
            $(".remove-btn").click(function () {
                var button = $(this);
                var commentId = button.data("comment-id");
                console.log("Comment ID:", commentId);

                if (confirm("Are you sure you want to delete this comment? This action is instantly applied and cannot be undone.")) {
                    var baseUrl = window.location.origin; // Get the base URL of the current environment
                    var removeMediaUrl = baseUrl + "/PETMEMORIAL/NEW/CommunityMemorials?handler=RemoveComment";
                    $.ajax({
                        // url: "https://localhost:7145/PETMEMORIAL/NEW/CommunityMemorials?handler=RemoveComment",
                        url: removeMediaUrl,
                        method: "POST",

                        headers: {
                            "RequestVerificationToken": token
                        },
                        data: { CommentId: commentId },
                        success: function (response) {
                            // Handle success
                            if (response.success) {

                                button.prev('img').remove(); // Remove the previous sibling image
                                button.prev('video').remove();
                                button.prev('audio').remove();
                                button.closest('.comment-container').remove();
                                button.remove(); // Remove the remove button itself
                                console.log("Comment removed");
                            } else {
                                console.log("Error: " + response.error);
                            }
                        },
                        error: function (xhr, status, error) {
                            // Handle error
                            console.log("Error removing comment: " + error);
                        }
                    });
                }
            });
        });
        var token = $('input[name="__RequestVerificationToken"]').val();

        $(document).ready(function () {
            $(".postremove-btn").click(function () {
                var button = $(this);
                var postcommentId = button.data("postcomment-id");
                console.log("Post Comment ID:", postcommentId);

                if (confirm("Are you sure you want to delete this comment? This action is instantly applied and cannot be undone.")) {
                    var baseUrl = window.location.origin; // Get the base URL of the current environment
                    var removepostcommentUrl = baseUrl + "/PETMEMORIAL/NEW/CommunityMemorials?handler=RemovePostComment";
                    $.ajax({
                        // url: "https://localhost:7145/PETMEMORIAL/NEW/CommunityMemorials?handler=RemovePostComment",
                        url: removepostcommentUrl,
                        method: "POST",

                        headers: {
                            "RequestVerificationToken": token
                        },
                        data: { postCommentId: postcommentId },
                        success: function (response) {
                            // Handle success
                            if (response.success) {

                                button.prev('img').remove(); // Remove the previous sibling image
                                button.prev('video').remove();
                                button.prev('audio').remove();
                                button.closest('.comment-container').remove();
                                button.remove(); // Remove the remove button itself
                                console.log("Comment removed");
                            } else {
                                console.log("Error: " + response.error);
                            }
                        },
                        error: function (xhr, status, error) {
                            // Handle error
                            console.log("Error removing comment: " + error);
                        }
                    });
                }
            });
        });

        window.onload = function () {
            var searchString = '@Model.SearchString';
            document.getElementById('searchInput').value = searchString;
            searchFunction(); // Trigger search after populating the input
        };
        function searchFunction() {
            var input = document.getElementById("searchInput");
            var filter = input.value.trim().toLowerCase(); // Convert filter to lowercase for case-insensitive search
            var reports = document.getElementsByClassName("tribute");

            for (var i = 0; i < reports.length; i++) {
                var report = reports[i];
                var searchableElements = report.getElementsByClassName("searchable");
                var found = false;

                for (var j = 0; j < searchableElements.length; j++) {
                    var nameElement = searchableElements[j];
                    var originalText = nameElement.textContent; // Store the original text
                    var text = originalText.toLowerCase(); // Convert text to lowercase for case-insensitive search
                    if (text.indexOf(filter) > -1) {
                        found = true;
                        // Highlight the matching text
                        var newText = highlightMatch(originalText, filter); // Pass the original text for highlighting
                        nameElement.innerHTML = newText;
                    } else {
                        // Clear previous highlights
                        nameElement.innerHTML = originalText;
                    }
                }

                if (found) {
                    report.style.display = "";
                } else {
                    report.style.display = "none";
                }
            }
        }

        // Helper function to highlight the matched text
        function highlightMatch(text, filter) {
            var regex = new RegExp('(' + filter.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + ')', 'ig');
            return text.replace(regex, '<span class="highlight">$1</span>');
        }

    </script>
}

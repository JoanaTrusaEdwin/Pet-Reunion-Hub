@page
@model Pet_Reunion_Hub.Pages.PETMEMORIAL.NEW.IndexModel

@{
    ViewData["Title"] = "Index";
    // Layout = "~/Pages/Shared/SignUp.cshtml";
}

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.RazorPages

<style>

   
    #createnew {
        border-radius: 5px;
        background-color: black;
        color: white;
        text-decoration: none;
        padding: 10px 20px;
        font-weight: bold;
        transition: background-color 0.3s;
    }

        #createnew:hover {
            background-color: #555;
        }

    #edit {
        border-radius: 5px;
        background-color: black;
        color: white;
        text-decoration: none;
        padding: 5px 10px;
        font-weight: bold;
    }


    #details {
        border-radius: 5px;
        background-color: #8b572a;
        color: white;
        text-decoration: none;
        padding: 5px 10px;
        font-weight: bold;
    }


    #delete {
        border-radius: 5px;
        background-color: red;
        color: white;
        text-decoration: none;
        padding: 5px 10px;
        font-weight: bold;
    }

    .highlight {
        background-color: yellow;
    }
</style>
<h1>My Tributes</h1>
<br/>
<p>
    <a asp-page="Create" id="createnew">Create a New Tribute</a>
</p>
<br/>

<br/>
<input style="border-radius:20px; height:40px; width: 500px;" type="text" id="searchInput" onkeyup="searchFunction()" placeholder="Search">
<br />
<br />
<div class="tribute-container">
@foreach (var item in Model.Tribute.Reverse())
{
    <div class="tribute" style="border: 1px solid #ccc; padding: 30px; margin-bottom: 20px;  border-radius: 5px; background-color: #fff; ">
            <h3 class="searchable">@item.PetName </h3>

      
        <p> <img src="@item.TributePhoto" alt="Pet Photo" style="max-width: 500px;" /></p>
       
        <p><strong>Pet Type:</strong> 
         <p class="searchable">@item.PetType </p>
         <br/>

         <p><strong>Breed:</strong>
         <p class="searchable">@(string.IsNullOrEmpty(item.PetBreed) ? "-" : item.PetBreed) </p>
         <br />
                  
            <p><strong>Sex:</strong>
            <p class="searchable">@(string.IsNullOrEmpty(item.PetSex) ? "-" : item.PetSex) </p>
            <br />


            <p><strong>Date of Birth:</strong>
            <p class="searchable">@(item.DateOfBirth != null ? item.DateOfBirth.Value.ToString("dd-MMM-yyyy HH:mm") : "-")</p>
            <br />

            <p><strong>Date of Adoption:</strong>
            <p class="searchable">@(item.DateOfAdoption != null ? item.DateOfAdoption.Value.ToString("dd-MMM-yyyy HH:mm") : "-")</p>
            <br />

            <p><strong>Date of Departure:</strong>
            <p class="searchable">@(item.DateOfDeparture != null ? item.DateOfDeparture.Value.ToString("dd-MMM-yyyy HH:mm") : "-")</p>
            <br />

            <p><strong>Cause of Death:</strong>
            <p class="searchable">@(string.IsNullOrEmpty(item.Cause) ? "-" : item.Cause) </p>

            <p><strong>Tribute Text:</strong>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable">@(string.IsNullOrEmpty(item.TributeText) ? "-" : item.TributeText) </p>
            <br />

            <p><strong>Created on:</strong>
            <p class="searchable">@item.CreatedAt.ToString("dd-MMM-yyyy HH:mm:ss")</p>
            <br />
      
        <p>
            <a asp-page="./Edit" asp-route-id="@item.Id" id="edit">Edit</a> 
            <a asp-page="./NEWDETAIL" asp-route-id="@item.Id" id="details">Details</a> 
            <a asp-page="./Delete" asp-route-id="@item.Id" id="delete">Delete</a>
        </p>
    </div>
}
</div>
<script>
    function searchFunction() {
        var input = document.getElementById("searchInput");
        var filter = input.value.trim().toLowerCase(); // Convert filter to lowercase for case-insensitive search
        var reports = document.getElementsByClassName("tribute");

        for (var i = 0; i < reports.length; i++) {
            var report = reports[i];
            var searchableElements = report.getElementsByClassName("searchable");
            var found = false;

            for (var j = 0; j < searchableElements.length; j++) {
                var nameElement = searchableElements[j];
                var originalText = nameElement.textContent; // Store the original text
                var text = originalText.toLowerCase(); // Convert text to lowercase for case-insensitive search

                if (text.indexOf(filter) > -1) {
                    found = true;
                    // Highlight the matching text
                    var newText = highlightMatch(originalText, filter); // Pass the original text for highlighting
                    nameElement.innerHTML = newText;
                }
            }

            if (found) {
                report.style.display = "";
            } else {
                report.style.display = "none";
            }
        }
    }

    // Helper function to highlight the matched text
    function highlightMatch(text, filter) {
        var regex = new RegExp('(' + filter.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + ')', 'ig');
        return text.replace(regex, '<span class="highlight">$1</span>');
    }

</script>

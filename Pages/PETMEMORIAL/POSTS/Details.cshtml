@page
@model Pet_Reunion_Hub.Pages.PETMEMORIAL.POSTS.DetailsModel

@{
    ViewData["Title"] = "Details";
    // Layout = "~/Pages/Shared/SignUp.cshtml";
}
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.RazorPages
@using System.Security.Claims
@using PRHDATALIB.Models
<style>
    /* Style for Edit and Back to List buttons */

    #edit {
        border-radius: 5px;
        background-color: #8b572a;
        color: white;
        text-decoration: none;
        padding: 5px 10px;
        font-weight: bold;
        transition: background-color 0.3s;
    }

    #back {
        border-radius: 5px;
        background-color: black;
        color: white;
        text-decoration: none;
        padding: 5px 10px;
        font-weight: bold;
        transition: background-color 0.3s;
    }

    .btn:hover {
        background-color: #555; /* Darken the background color on hover */
    }
</style>




<div style="padding: 30px; margin-bottom: 20px; border: 1px solid #ccc; border-radius: 5px; background-color: #fff;">
    <h4>Your Memory</h4>
    <hr />
  
    <dl>
        <p>Post ID: @Model.Post.Id</p>
        <dt>Created on:</dt>
        <dd>@Model.Post.CreatedAt.ToString("dd-MMM-yyyy HH:mm:ss") (UTC)</dd>

        <p><strong>Title:</strong>
        <p class="searchable">@(string.IsNullOrEmpty(Model.Post.Title) ? "-" : Model.Post.Title) </p>
        <br />

        <dt>Description:</dt>
        <dd style="white-space: pre-wrap; overflow-wrap: break-word;">@(Model.Post.Content != null ? Model.Post.Content:"-")</dd>

        <div>
            <h4>Your Media Files</h4>

              @if (Model.Post.Media != null && Model.Post.Media.Any())
                {
                    <p><strong>Media:</strong></p>
                    <div class="media-container">
               

                        @foreach (var mediaItem in Model.Post.Media)
                        {
                            var lastSlashIndex = mediaItem.MediaUrl.LastIndexOf('/');
                            var fileName = mediaItem.MediaUrl.Substring(lastSlashIndex + 1);
                            var lastUnderscoreIndex = fileName.LastIndexOf('_');

                            if (lastUnderscoreIndex != -1)
                            {
                                var fileNameWithoutUniqueIdentifier = fileName.Substring(0, lastUnderscoreIndex);
                                <span style="display: block; font-size: small;">@fileNameWithoutUniqueIdentifier</span>
                            }
                            else
                            {
                                <span style="display: block; font-size: small;">@fileName</span>
                            }
                            @if (mediaItem.MediaType == "Image")
                            {
                                <img src="@mediaItem.MediaUrl" alt="Media Image" style="max-width: 500px; margin-right: 10px;">


                            }
                            else if (mediaItem.MediaType == "Video")
                            {
                                <video src="@mediaItem.MediaUrl" controls style="max-width: 500px; margin-right: 10px;"></video>


                            }
                            else if (mediaItem.MediaType == "Audio")
                            {
                                <audio src="@mediaItem.MediaUrl" controls style="max-width: 500px; margin-right: 10px;"></audio>

                            }
                        }
                </div>
            }
            else
            {
                <p>No media</p>
            }
        </div>

        <dt>Privacy Settings:</dt>
        <dd style="white-space: pre-wrap; overflow-wrap: break-word;">@Model.Post.IsPublic</dd>
</dl>

<div>
    <a asp-page="./Edit" asp-route-id="@Model.Post?.Id" id="edit">Edit</a>
        <a asp-page="./Index" id="back">Back to My Posts</a>
</div>
</div>
<div>
    <!-- Comments Section -->
    <h3>Comments</h3>
    @if (Model.Post.PostComments.Any())
    {

        @foreach (var comment in Model.Post.PostComments)
        {
            <div class="comment-container" style="background-color: #593214; color:white;border-radius: 5px; padding: 10px; margin-bottom: 10px; overflow-wrap: break-word;">
                <p class="searchable">Comment ID: @comment.Id</p>
                <br />
                <strong class="searchable">@@@comment.User.UserName</strong> <!-- Display username -->
                <br />
                <p class="searchable">@comment.Content</p>
                <br />
                <p class="searchable">@comment.CreatedAt.ToString("dd-MMM-yyyy HH:mm:ss") (UTC) </p>
                @if (User.Identity.IsAuthenticated && comment.UserId == User.FindFirstValue(ClaimTypes.NameIdentifier))
                {

                    <button type="button" class="btn btn-danger remove-btn" data-comment-id="@comment.Id">Delete</button>
                }
            </div>
        }

    }
    else
    {
        <p>No comments yet.</p>
    }
    <!-- Form to Add New Comment -->
    <form method="post">
        <input type="hidden" name="postId" value="@Model.Post.Id" />
        <div class="form-group">
            <label for="commentContent" style="color:black;"><b>Add a comment:</b></label>
            <p style="color:black;">To mention a user, simply type "@@[username of that commenter]" anywhere in the comment. Or, you can just copy the username of the comment you want to reply to.  For example, if you want to mention the user example@gmail.com, you would type "@@example@gmail.com"..</p>
            <textarea maxlength="1000" class="form-control autosize  character-count" id="commentContent" name="commentContent" rows="3" oninput="handleInput(event, 'comment-content-count')"></textarea>
            <span style="color:black;" id="comment-content-count" class="character-count-display">0/1000</span>
        </div>
        <button type="submit" class="btn btn-primary" style="background-color:black; border-radius:5px; color:white; border:none;"><b>Post Comment</b></button>
    </form>


    <hr />
</div>
<hr />
<form asp-antiforgery="true">
    <input type="hidden" name="__RequestVerificationToken" value="@ViewData["RequestVerificationToken"]" />
    <!-- Your other form elements -->
</form>
<hr />
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        // Your existing JavaScript code here
        function updateCharacterCount(inputId, countId, limit) {
            var input = document.getElementById(inputId);
            var count = document.getElementById(countId);
            console.log("Input value:", input.value);
            console.log("Input length:", input.value.length);
            count.textContent = input.value.length + "/" + limit;
        }

        // Call this function when the input changes
        function handleInput(event, countId) {
            var inputId = event.target.id;
            var limit = event.target.getAttribute('maxlength') || 0;
            updateCharacterCount(inputId, countId, limit);
        }

        var characterCountInputs = document.querySelectorAll('.character-count');
        characterCountInputs.forEach(function (input) {
            input.addEventListener('input', function (event) {
                var countId = input.getAttribute('data-count-id');
                handleInput(event, countId);
            });
        });
        var token = $('input[name="__RequestVerificationToken"]').val();

        $(document).ready(function () {
            $(".remove-btn").click(function () {
                var button = $(this);
                var commentId = button.data("comment-id");
                console.log("Comment ID:", commentId);

                if (confirm("Are you sure you want to delete this comment? This action is instantly applied and cannot be undone.")) {
                    var baseUrl = window.location.origin; // Get the base URL of the current environment
                    var removeMediaUrl = baseUrl + "/PETMEMORIAL/POSTS/Details?handler=RemoveComment";
                    $.ajax({
                       // url: "https://localhost:7145/PETMEMORIAL/POSTS/Details?handler=RemoveComment",
                        url: removeMediaUrl,
                        method: "POST",

                        headers: {
                            "RequestVerificationToken": token
                        },
                        data: { CommentId: commentId },
                        success: function (response) {
                            // Handle success
                            if (response.success) {

                                button.prev('img').remove(); // Remove the previous sibling image
                                button.prev('video').remove();
                                button.prev('audio').remove();
                                button.closest('.comment-container').remove();
                                button.remove(); // Remove the remove button itself
                                console.log("Comment removed");
                            } else {
                                console.log("Error: " + response.error);
                            }
                        },
                        error: function (xhr, status, error) {
                            // Handle error
                            console.log("Error removing comment: " + error);
                        }
                    });
                }
            });
        });
    
</script>
}

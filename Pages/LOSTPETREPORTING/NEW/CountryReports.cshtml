@page
@model Pet_Reunion_Hub.Pages.LOSTPETREPORTING.NEW.CountryReportsModel
@{
}
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.RazorPages
<br />
<div class="button-container">
    <a href="/LOSTPETREPORTING/NEW/AllReports" class="box" id="global">
        <b>Lost Pets Around The World</b>
    </a>

    <a href="/LOSTPETREPORTING/NEW/StateReports" class="box" id="state">
        <b>Lost Pets in Your State</b>
    </a>

    <a href="/LOSTPETREPORTING/NEW/CityReports" class="box" id="city">
        <b>Lost Pets in Your City</b>
    </a>
</div>
<br />
<h1>Reports in Your Country</h1>
<input style="border-radius:20px; height:40px; width: 500px;" type="text" id="searchInput" onkeyup="searchFunction()" placeholder="Search">
<br />
<br />

<div class="report-container">


    @foreach (var report in Model.CreateReport.Reverse())
    {
        <div class="report">

            <h2 style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable">@report.PetName</h2>
            <br />

            <h5>Owner Contact Information:</h5>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable">@report.ContactInformation</p>
            <br />

            <div class="photos">
                @foreach (var photo in report.ReportPhotos)
                {
                    <img src="@photo.PhotoUrl" maxwidth="500" maxheight="1000" />
                }
            </div>
            <p><strong>General Location:</strong></p>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.GenLoc</p>
            <br />

            <p><strong>Last Seen Location:</strong></p>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.LastSeenLocation</p>
            <br />

            <p><strong>Last Seen Time:</strong></p>
            <p class="searchable"> @report.LastSeenTime.Value.ToString("dd-MMM-yyyy HH:mm")</p>
            <br />


            <p><strong>Estimated Age:</strong></p>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.Age</p>
            <br />

            <p><strong>Pet Microchip ID:</strong></p>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @(string.IsNullOrEmpty(report.PetMicrochipID) ? "-" : report.PetMicrochipID)</p>
            <br />

            <p><strong>Type:</strong></p>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.PetType</p>
            <br />

            <p><strong>Breed:</strong></p>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.PetBreed</p>
            <br />

            <p><strong>Sex:</strong></p>
            <p class="searchable">@report.PetGender</p>
            <br />


            <p><strong>Additional Description:</strong></p>
            <p style="white-space: pre-wrap; overflow-wrap: break-word;" class="searchable"> @report.AdditionalDescription</p>
            <br />

            <p><strong>Date of Birth:</strong></p>
            <p class="searchable"> @(report.DateOfBirth != null ? report.DateOfBirth.Value.ToString("dd-MMM-yyyy HH:mm") : "-")</p>
            <br />

            <p><strong>Created on:</strong></p>
            <p class="searchable">@report.CreatedAt.ToString("dd-MMM-yyyy HH:mm:ss")</p>
            <br />
            @*  COMMENT *@

        </div>
    }

</div>
<style>
    .button-container {
        display: flex;
        justify-content: space-between; /* Adjust as needed */
    }


    #state {
        background-color: #8b572a;
        color: white;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        font-weight: bold; /* Make the text bold */
        font-size: 1.1em;
    }
    #global {
        background-color: black;
        color: #fff;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        font-weight: bold; /* Make the text bold */
        font-size: 1.1em;
    }

    #city {
        background-color: white;
        color: black;
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        text-decoration: none;
        font-weight: bold; /* Make the text bold */
        font-size: 1.1em;
    }

    .report-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .report {
        background-color: white;
        border-radius: 20px;
        padding: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        width: 1000px;
    }

    .photos {
        margin-top: 10px;
    }

        .photos img {
            margin-right: 5px;
        }

    .highlight {
        background-color: yellow;
    }
</style>
<script>
    function searchFunction() {
        var input = document.getElementById("searchInput");
        var filter = input.value.trim().toLowerCase(); // Convert filter to lowercase for case-insensitive search
        var reports = document.getElementsByClassName("report");

        for (var i = 0; i < reports.length; i++) {
            var report = reports[i];
            var searchableElements = report.getElementsByClassName("searchable");
            var found = false;

            for (var j = 0; j < searchableElements.length; j++) {
                var nameElement = searchableElements[j];
                var originalText = nameElement.textContent; // Store the original text
                var text = originalText.toLowerCase(); // Convert text to lowercase for case-insensitive search

                if (text.indexOf(filter) > -1) {
                    found = true;
                    // Highlight the matching text
                    var newText = highlightMatch(originalText, filter); // Pass the original text for highlighting
                    nameElement.innerHTML = newText;
                }
            }

            if (found) {
                report.style.display = "";
            } else {
                report.style.display = "none";
            }
        }
    }

    // Helper function to highlight the matched text
    function highlightMatch(text, filter) {
        var regex = new RegExp('(' + filter.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + ')', 'ig');
        return text.replace(regex, '<span class="highlight">$1</span>');
    }

</script>

@* @page
@model Pet_Reunion_Hub.Pages.NEWNOTIFICATIONModel
@{
}
<h1>Notifications</h1>

@if (Model.Notifications.Any())
{
    @foreach (var notification in Model.Notifications.OrderByDescending(n => n.CreatedAt))
    {
        <div style="background-color: white; color: black; border-radius:10px; padding: 10px; margin-bottom:10px;">
            <p><b>@notification.Content</b></p>
            <a style="text-decoration:none; color:white;  background-color:black; padding:5px; border-radius:4px;" href="/PETMEMORIAL/NEW/CommunityMemorials"><strong>View in Community Memorials</strong></a>
            <p>@notification.CreatedAt.ToString("dd-MMM-yyyy HH:mm")</p>
        </div>
    }

}
else
{
    <p>No Notifications</p>
}
 *@

@page
@model Pet_Reunion_Hub.Pages.NEWNOTIFICATIONModel
@{
}
<h3>New Comments</h3>

@if (Model.Notifications.Any())
{
    @foreach (var notification in Model.Notifications.OrderByDescending(n => n.CreatedAt))
    {
        <div id="notification-@notification.Id" style="background-color: white; color: black; border-radius:10px; padding: 10px; margin-bottom:10px;">
            <p id="notification-content-@notification.Id" style="font-weight: @(notification.IsRead ? "normal" : "bold");">@notification.Content</p>
            @{
                // Extract the string inside the first pair of brackets
                var startIndex = notification.Content.IndexOf('(') + 1;
                var endIndex = notification.Content.IndexOf(')');
                string searchString = null; // Define searchString variable outside the conditional block
                if (startIndex != -1 && endIndex != -1)
                {
                    searchString = notification.Content.Substring(startIndex, endIndex - startIndex);
                }
            }
            <a id="community-memorials-button-@notification.Id" style="text-decoration:none; color:white;  background-color:black; padding:5px; border-radius:4px;"
               href="/PETMEMORIAL/NEW/CommunityMemorials?searchString=@Html.Raw(System.Web.HttpUtility.UrlEncode(searchString))" onclick="markAsRead('@notification.Id')">View in Community Memorials</a>
            <p>@notification.CreatedAt.ToString("dd-MMM-yyyy HH:mm")</p>
        </div>
    }

}
else
{
    <p>No Notifications</p>
}

<script>
    // Check if the notification has been marked as read previously
    // function checkReadStatus(notificationId) {
    //     var isRead = localStorage.getItem('communityMemorialsClicked_' + notificationId);
    //     if (isRead === 'true') {
    //         var contentElement = document.getElementById('notification-content-' + notificationId);
    //         contentElement.style.fontWeight = 'normal';
    //     }
    // }

    // Mark the notification as read and store the status
    // function markAsRead(notificationId) {
    //     var contentElement = document.getElementById('notification-content-' + notificationId);
    //     contentElement.style.fontWeight = 'normal'; // Remove bold styling
    //     localStorage.setItem('communityMemorialsClicked_' + notificationId, 'true'); // Store the state
    // }
    function markAsRead(notificationId) {
        var contentElement = document.getElementById('notification-content-' + notificationId);
        contentElement.style.fontWeight = 'normal'; // Remove bold styling
        localStorage.setItem('communityMemorialsClicked_' + notificationId, 'true'); // Store the state

        // Send AJAX request to mark the notification as read
        $.ajax({
            type: 'POST',
            url: '@Url.Action("MarkAsRead", "Notification")',
            data: { id: notificationId },
            success: function (response) {
                // Handle success response if needed
                console.log('Notification marked as read successfully');
            },
            error: function () {
                // Handle error if needed
                console.error('Failed to mark notification as read');
            }
        });
    }
    // Check the read status for each notification when the page loads
    document.addEventListener('DOMContentLoaded', function () {
    @foreach (var notification in Model.Notifications)
    {
        <text>checkReadStatus('@notification.Id'); </text>
    }
        });
</script>
